{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","this","props","todos","onSelectedUserId","sortByCompleted","sortByTitle","randomize","className","htmlFor","id","type","placeholder","onChange","target","value","onClick","map","todo","classNames","completed","readOnly","checked","title","userId","React","Component","request","url","fetch","then","response","json","getToods","getUser","CurrentUser","user","loader","a","selectedUserId","setState","prevProps","name","email","phone","App","filter","includes","by","sort","Math","random","ReactDOM","render","document","getElementById"],"mappings":"iXAYaA,EAAb,4MACEC,MAAQ,GADV,4CAGE,WACE,MAMIC,KAAKC,MALPC,EADF,EACEA,MACAC,EAFF,EAEEA,iBACAC,EAHF,EAGEA,gBACAC,EAJF,EAIEA,YACAC,EALF,EAKEA,UAGF,OACE,sBAAKC,UAAU,WAAf,UACE,wCACA,sBAAKA,UAAU,2BAAf,UACE,uBAAOC,QAAQ,OAAf,SACE,uBACEC,GAAG,OACHC,KAAK,OACLC,YAAY,gBACZJ,UAAU,kBACVK,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACXR,EAAYQ,EAAOC,YAIzB,yBACEF,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACXT,EAAgBS,EAAOC,QAEzBP,UAAU,mBAJZ,UAME,yCACA,4CACA,kDAEF,wBACEA,UAAU,SACVG,KAAK,SACLK,QAAS,WACPT,KAJJ,uBASA,oBAAIC,UAAU,iBAAd,SACGL,EAAMc,KAAI,SAACC,GAAD,OACT,qBAEEV,UAAWW,IACT,iBACA,CAAE,0BAA2BD,EAAKE,WAClC,CAAE,6BAA8BF,EAAKE,YALzC,UAQE,wBAAOX,QAAO,UAAKS,EAAKR,IAAxB,UACE,uBACEA,GAAE,UAAKQ,EAAKR,IACZC,KAAK,WACLU,UAAQ,EACRC,QAASJ,EAAKE,YAEhB,4BACGF,EAAKK,WAIV,yBACEf,UAAWW,IACT,wBACA,UAEFR,KAAK,SACLK,QAAS,WACPZ,EAAiBc,EAAKM,SAP1B,qBAWGN,EAAKM,YA9BHN,EAAKR,mBAjD1B,GAA8Be,IAAMC,WCRpC,SAASC,EAAQC,GACf,OAAOC,MAAMD,GACVE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EAAWN,EARV,2CAUP,SAASO,EAAQxB,GACtB,OAAOiB,EAAQ,GAAD,OAVC,0CAUD,YAAgBjB,I,UCEnByB,EAAb,4MACEnC,MAAe,CACboC,KAAM,MAFV,EAeEC,OAfF,sBAeW,sBAAAC,EAAA,6EACqBJ,EAAQ,EAAKhC,MAAMqC,gBADxC,yBACSH,KADT,WACFI,SADE,2DAfX,uDAKE,WACEvC,KAAKoC,WANT,gCASE,SAAmBI,GACbA,EAAUF,iBAAmBtC,KAAKC,MAAMqC,gBAC1CtC,KAAKoC,WAXX,oBAmBE,WACE,IAAQD,EAASnC,KAAKD,MAAdoC,KACAhC,EAAqBH,KAAKC,MAA1BE,iBAER,OACE,sBAAKI,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,kDAEG4B,GAAQA,EAAK1B,QAIlB,oBAAIF,UAAU,oBAAd,SACG4B,GAAQA,EAAKM,OAEhB,mBAAGlC,UAAU,qBAAb,SACG4B,GAAQA,EAAKO,QAEhB,mBAAGnC,UAAU,qBAAb,SACG4B,GAAQA,EAAKQ,QAEhB,wBACEpC,UAAU,SACVG,KAAK,SACLK,QAAS,kBAAMZ,EAAiB,IAHlC,0BAzCR,GAAiCqB,IAAMC,WCFjCmB,E,4MACJ7C,MAAe,CACbuC,eAAgB,EAChBpC,MAAO,I,EAOTkC,O,sBAAS,sBAAAC,EAAA,6EACsBL,EADtB,yBACS9B,MADT,WACFqC,SADE,2D,EAITpC,iBAAmB,SAACmC,GAClB,EAAKC,SAAS,CAAED,oB,EAGlBjC,Y,uCAAc,WAAOiB,GAAP,SAAAe,EAAA,sEACN,EAAKD,SADC,OAGZ,EAAKG,UAAS,SAAAxC,GAAK,MACjB,CAAEG,MAAOH,EAAMG,MAAM2C,QAAO,SAAC5B,GAAD,OAAgBA,EAAKK,MAAMwB,SAASxB,UAJtD,2C,wDAQdlB,gB,uCAAkB,WAAO2C,GAAP,SAAAV,EAAA,sEACV,EAAKD,SADK,YAGRW,EAHQ,OAIT,QAJS,OAOT,WAPS,6BAKZ,EAAKR,UAAS,SAAAxC,GAAK,MAAK,CAAEG,MAAOH,EAAMG,UAL3B,mCAQZ,EAAKqC,UAAS,SAAAxC,GAAK,MACjB,CAAEG,MAAOH,EAAMG,MAAM2C,QAAO,SAAC5B,GAAD,OAAiBA,EAAKE,iBATxC,4BAcZ,EAAKoB,UAAS,SAAAxC,GAAK,MACjB,CAAEG,MAAOH,EAAMG,MAAM2C,QAAO,SAAC5B,GAAD,OAAgBA,EAAKE,iBAfvC,4C,wDAoBlBb,UAAY,WACV,EAAK8B,SACL,EAAKG,UAAS,SAAAxC,GAAK,MAAK,CAAEG,MAAOH,EAAMG,MAAM8C,MAAK,iBAAM,GAAMC,KAAKC,iB,uDA1CrE,WACElD,KAAKoC,W,oBA4CP,WACE,MAAkCpC,KAAKD,MAA/BuC,EAAR,EAAQA,eAAgBpC,EAAxB,EAAwBA,MAEtBC,EAIEH,KAJFG,iBACAE,EAGEL,KAHFK,YACAD,EAEEJ,KAFFI,gBACAE,EACEN,KADFM,UAGF,OACE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEL,MAAOA,EACPC,iBAAkBA,EAClBE,YAAaA,EACbD,gBAAiBA,EACjBE,UAAWA,MAIf,qBAAKC,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACG+B,EAAiB,EAChB,cAAC,EAAD,CACEA,eAAgBA,EAChBnC,iBAAkBA,IAElB,8B,GA/EEqB,IAAMC,WAuFTmB,IChGfO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4c56755a.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  onSelectedUserId: (selectedUserId: number) => void,\n  sortByTitle: (title: string) => void,\n  sortByCompleted: (by: string) => void,\n  randomize: () => void,\n};\n\nexport class TodoList extends React.Component<Props> {\n  state = {};\n\n  render() {\n    const {\n      todos,\n      onSelectedUserId,\n      sortByCompleted,\n      sortByTitle,\n      randomize,\n    } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <label htmlFor=\"sort\">\n            <input\n              id=\"sort\"\n              type=\"text\"\n              placeholder=\"Enter a title\"\n              className=\"TodoList__input\"\n              onChange={({ target }) => {\n                sortByTitle(target.value);\n              }}\n            />\n          </label>\n          <select\n            onChange={({ target }) => {\n              sortByCompleted(target.value);\n            }}\n            className=\"TodoList__select\"\n          >\n            <option>all</option>\n            <option>active</option>\n            <option>completed</option>\n          </select>\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={() => {\n              randomize();\n            }}\n          >\n            Randomize\n          </button>\n          <ul className=\"TodoList__list\">\n            {todos.map((todo: Todo) => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )}\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input\n                    id={`${todo.id}`}\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>\n                    {todo.title}\n                  </p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    onSelectedUserId(todo.userId);\n                  }}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","// eslint-disable-next-line\nconst todosUrl = `https://mate.academy/students-api/todos`;\nconst usersUrl = 'https://mate.academy/students-api/users';\n\nfunction request(url: string) {\n  return fetch(url)\n    .then(response => response.json());\n}\n\nexport const getToods = request(todosUrl);\n\nexport function getUser(id: number) {\n  return request(`${usersUrl}/${id}`);\n}\n","import React from 'react';\nimport { getUser } from '../../api/api';\n\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number,\n  onSelectedUserId: (selectedUserId: number) => void,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loader();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loader();\n    }\n  }\n\n  loader = async () => {\n    this.setState({ user: await getUser(this.props.selectedUserId) });\n  };\n\n  render() {\n    const { user } = this.state;\n    const { onSelectedUserId } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user && user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {user && user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user && user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user && user.phone}\n        </p>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelectedUserId(0)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getToods } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    this.loader();\n  }\n\n  loader = async () => {\n    this.setState({ todos: await getToods });\n  };\n\n  onSelectedUserId = (selectedUserId: number) => {\n    this.setState({ selectedUserId });\n  };\n\n  sortByTitle = async (title: string) => {\n    await this.loader();\n\n    this.setState(state => (\n      { todos: state.todos.filter((todo: Todo) => todo.title.includes(title)) }\n    ));\n  };\n\n  sortByCompleted = async (by: string) => {\n    await this.loader();\n\n    switch (by) {\n      case 'all':\n        this.setState(state => ({ todos: state.todos }));\n        break;\n      case 'active':\n        this.setState(state => (\n          { todos: state.todos.filter((todo: Todo) => !todo.completed) }\n        ));\n        break;\n\n      default:\n        this.setState(state => (\n          { todos: state.todos.filter((todo: Todo) => todo.completed) }\n        ));\n    }\n  };\n\n  randomize = () => {\n    this.loader();\n    this.setState(state => ({ todos: state.todos.sort(() => 0.5 - Math.random()) }));\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n    const {\n      onSelectedUserId,\n      sortByTitle,\n      sortByCompleted,\n      randomize,\n    } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onSelectedUserId={onSelectedUserId}\n            sortByTitle={sortByTitle}\n            sortByCompleted={sortByCompleted}\n            randomize={randomize}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId > 0 ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                onSelectedUserId={onSelectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}